---
import '~/assets/styles/tailwind.css';

import { I18N } from 'astrowind:config';

import CommonMeta from '~/components/common/CommonMeta.astro';
import Favicons from '~/components/Favicons.astro';
import CustomStyles from '~/components/CustomStyles.astro';
import ApplyColorMode from '~/components/common/ApplyColorMode.astro';
import Metadata from '~/components/common/Metadata.astro';
import SiteVerification from '~/components/common/SiteVerification.astro';
import Analytics from '~/components/common/Analytics.astro';
import BasicScripts from '~/components/common/BasicScripts.astro';

// Comment the line below to disable View Transitions
import { ClientRouter } from 'astro:transitions';

import type { MetaData as MetaDataType } from '~/types';

export interface Props {
  metadata?: MetaDataType;
}

const { metadata = {} } = Astro.props;
const { language, textDirection } = I18N;
---

<!doctype html>
<html lang={language} dir={textDirection} class="2xl:text-[20px]">
  <head>
    <CommonMeta />
    <Favicons />
    <CustomStyles />
    <ApplyColorMode />
    <Metadata {...metadata} />
    <SiteVerification />
    <Analytics />

    <!-- Comment the line below to disable View Transitions -->
    <ClientRouter fallback="swap" />
    
    <!-- Additional CSP meta tag for Netlify to allow loading GitHub images -->
    {import.meta.env.PROD && (
      <meta 
        http-equiv="Content-Security-Policy" 
        content="default-src 'self'; img-src 'self' https: data:; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'; connect-src 'self' https://raw.githubusercontent.com;"
      />
    )}
  </head>

  <body class="antialiased text-default bg-page tracking-tight">
    <slot />

    <BasicScripts />
    
    <!-- Initialize image debugging on Netlify -->
    <script>
      // This will run after the page has loaded
      document.addEventListener('DOMContentLoaded', function() {
        if (typeof window !== 'undefined' && 
            window.location.hostname.includes('netlify')) {
          
          // Monitor image loading
          const images = document.querySelectorAll('img');
          let failedCount = 0;
          
          images.forEach(img => {
            if (!img.complete) {
              img.addEventListener('error', function() {
                failedCount++;
                console.error('Image failed to load:', img.src);
                
                // Attempt to fix GitHub URLs
                if (img.src.includes('githubusercontent')) {
                  // Try with different attributes
                  img.crossOrigin = 'anonymous';
                  img.referrerPolicy = 'no-referrer';
                  
                  // Force HTTPS
                  if (img.src.startsWith('http:')) {
                    img.src = img.src.replace('http:', 'https:');
                  }
                }
              });
            }
          });
        }
      });
    </script>
  </body>
</html>
