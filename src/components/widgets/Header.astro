---
import { Icon } from "astro-icon/components";
import Logo from "~/components/Logo.astro";
import ToggleTheme from "~/components/common/ToggleTheme.astro";
import ToggleMenu from "~/components/common/ToggleMenu.astro";
import Button from "~/components/ui/Button.astro"

import { getHomePermalink } from "~/utils/permalinks";
import { trimSlash, getAsset } from "~/utils/permalinks";
import type { CallToAction } from "~/types";

interface Link {
  text?: string;
  href?: string;
  ariaLabel?: string;
  icon?: string;
}

interface ActionLink extends CallToAction {}

interface MenuLink extends Link {
  links?: Array<MenuLink>;
}

export interface Props {
  id?: string;
  links?: Array<MenuLink>;
  actions?: Array<ActionLink>;
  isSticky?: boolean;
  isDark?: boolean;
  isFullWidth?: boolean;
  showToggleTheme?: boolean;
  showRssFeed?: boolean;
  position?: string;
}

const {
  id = "header",
  links = [],
  actions = [],
  isSticky = false,
  isDark = false,
  isFullWidth = false,
  showToggleTheme = false,
  showRssFeed = false,
  position = "center",
} = Astro.props;

const currentPath = `/${trimSlash(new URL(Astro.url).pathname)}`
---

<header
  class:list={[
    { sticky: isSticky, relative: !isSticky, dark: isDark },
    "top-0 z-50 w-full border-b border-gray-200/20 dark:border-gray-800/20 transition-all duration-300 ease-in-out",
  ]}
  {...isSticky ? { "data-aw-sticky-header": true } : {}}
  {...id ? { id } : {}}
>
  <div class="relative mx-auto max-w-[2000px] px-4 sm:px-6">
    <div class="flex h-16 items-center justify-between">
      <!-- Logo -->
      <div class="flex-shrink-0">
        <a class="flex items-center" href={getHomePermalink()}>
          <Logo />
        </a>
      </div>

      <!-- Desktop Navigation -->
      <nav class="hidden md:flex md:items-center md:space-x-8" aria-label="Desktop navigation">
        {
          links.map(({ text, href, links }) => (
            <div class="relative group">
              {links?.length ? (
                <>
                  <button class="flex items-center text-sm font-medium text-gray-700 hover:text-gray-900 dark:text-gray-300 dark:hover:text-white">
                    {text}
                    <Icon name="tabler:chevron-down" class="ml-1 h-4 w-4" />
                  </button>
                  <div class="absolute left-0 mt-2 w-48 origin-top-left rounded-md bg-white py-1 shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none dark:bg-gray-800 opacity-0 invisible group-hover:opacity-100 group-hover:visible transition-all duration-200">
                    {
                      links.map(({ text: text2, href: href2 }) => (
                        <a
                          class:list={[
                            "block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 dark:text-gray-300 dark:hover:bg-gray-700",
                            { "text-primary dark:text-primary": href2 === currentPath }
                          ]}
                          href={href2}
                        >
                          {text2}
                        </a>
                      ))
                    }
                  </div>
                </>
              ) : (
                <a
                  class:list={[
                    "text-sm font-medium text-gray-700 hover:text-gray-900 dark:text-gray-300 dark:hover:text-white",
                    { "text-primary dark:text-primary": href === currentPath }
                  ]}
                  href={href}
                >
                  {text}
                </a>
              )}
            </div>
          ))
        }
      </nav>

      <!-- Right side buttons -->
      <div class="flex items-center space-x-4">
        {showToggleTheme && <ToggleTheme iconClass="w-5 h-5" />}
        {
          showRssFeed && (
            <a
              class="text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200"
              aria-label="RSS Feed"
              href={getAsset('/rss.xml')}
            >
              <Icon name="tabler:rss" class="w-5 h-5" />
            </a>
          )
        }
        {
          actions?.length ? (
            <div class="hidden md:flex md:items-center md:space-x-4">
              {actions.map((btnProps) => (
                <Button {...btnProps} class="text-sm" />
              ))}
            </div>
          ) : null
        }
        <!-- Mobile menu button -->
        <div class="flex md:hidden">
          <ToggleMenu />
        </div>
      </div>
    </div>
  </div>

  <!-- Mobile menu -->
  <div class="md:hidden">
    <div class="fixed inset-0 z-40 hidden bg-gray-600/75 dark:bg-gray-900/75 transition-opacity" id="mobile-menu-overlay"></div>
    <div class="fixed inset-y-0 right-0 z-50 w-full max-w-xs transform overflow-y-auto bg-white px-6 py-6 shadow-xl transition-transform duration-300 ease-in-out dark:bg-gray-800 md:hidden" id="mobile-menu">
      <div class="flex items-center justify-between">
        <a class="flex items-center" href={getHomePermalink()}>
          <Logo />
        </a>
        <div class="flex items-center space-x-4">
          {showToggleTheme && <ToggleTheme iconClass="w-5 h-5" />}
          <ToggleMenu />
        </div>
      </div>
      <nav class="mt-6 space-y-6" aria-label="Mobile navigation">
        {
          links.map(({ text, href, links }) => (
            <div>
              {links?.length ? (
                <div class="space-y-2">
                  <div class="text-sm font-medium text-gray-900 dark:text-white">{text}</div>
                  <div class="ml-4 space-y-2">
                    {
                      links.map(({ text: text2, href: href2 }) => (
                        <a
                          class:list={[
                            "block text-sm text-gray-500 hover:text-gray-900 dark:text-gray-400 dark:hover:text-white",
                            { "text-primary dark:text-primary": href2 === currentPath }
                          ]}
                          href={href2}
                        >
                          {text2}
                        </a>
                      ))
                    }
                  </div>
                </div>
              ) : (
                <a
                  class:list={[
                    "block text-sm font-medium text-gray-900 hover:text-gray-700 dark:text-white dark:hover:text-gray-300",
                    { "text-primary dark:text-primary": href === currentPath }
                  ]}
                  href={href}
                >
                  {text}
                </a>
              )}
            </div>
          ))
        }
      </nav>
      {
        actions?.length ? (
          <div class="mt-6 space-y-4">
            {actions.map((btnProps) => (
              <Button {...btnProps} class="w-full justify-center" />
            ))}
          </div>
        ) : null
      }
    </div>
  </div>
</header>

<style>
  #mobile-menu {
    transform: translateX(100%);
  }
  
  #header.expanded #mobile-menu {
    transform: translateX(0);
  }
  
  #mobile-menu-overlay {
    opacity: 0;
    pointer-events: none;
  }
  
  #header.expanded #mobile-menu-overlay {
    opacity: 1;
    pointer-events: auto;
  }
</style>
